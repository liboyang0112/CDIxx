cmake_minimum_required(VERSION 3.22)
project(CDIxx LANGUAGES CXX C)
set(CMAKE_CXX_COMPILER "/usr/bin/g++-12")
set(CMAKE_C_COMPILER "/usr/bin/gcc-12")
set(TORCH_DIR "/home/boyang/.local/python_venv/lib/python3.11/site-packages/torch")
set(CMAKE_CXX_FLAGS "-Wno-deprecated-declarations")
set(CMAKE_LINK_DEPENDS_NO_SHARED TRUE)
find_package( OpenCV REQUIRED )
find_package( GSL REQUIRED )
find_package(VTK COMPONENTS 
  jsoncpp
  CommonColor
  CommonCore
  CommonDataModel
  FiltersGeometry
  IOXML
  InteractionStyle
  RenderingContextOpenGL2
  RenderingCore
  RenderingFreeType
  RenderingGL2PSOpenGL2
  RenderingOpenGL2
  RenderingVolumeOpenGL2
  )
find_package(CUDA)
find_package(MPI REQUIRED)
find_package(TBB REQUIRED)
find_package(HDF5 REQUIRED)
find_package(PythonLibs REQUIRED)
set(TBB_LIBRARIES TBB::tbb TBB::tbbmalloc TBB::tbbmalloc_proxy)
set(Alllibs fftw3 config fftw3_mpi fftw3_threads m z pthread ${MPI_LIBRARIES} ${TBB_LIBRARIES} ${OpenCV_LIBS} ${HDF5_LIBRARIES} cholmod ${GSL_LIBRARIES})
set(CMAKE_BUILD_TYPE Debug)
set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/bin)
set(LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/lib)
set(EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})
set(ENABLE_CUDA 1)
include_directories( ${OpenCV_INCLUDE_DIRS} )
include_directories ("${MPI_CXX_INCLUDE_DIRS}")
include_directories ("${HDF5_INCLUDE_DIRS}")
include_directories ("${PROJECT_SOURCE_DIR}/include")
include_directories ("/usr/include/suitesparse")
include_directories (${TORCH_DIR}/include)
include_directories (${TORCH_DIR}/include/torch/csrc/api/include)
include_directories (${PYTHON_INCLUDE_DIRS})
cuda_include_directories ("${PROJECT_SOURCE_DIR}/include")
link_directories(${TORCH_DIR}/lib)
link_directories(${PROJECT_SOURCE_DIR}/lib)
set(TORCH_LIBS c10_cuda torch_cpu torch_cuda torch c10)

file( GLOB APP_SOURCES RELATIVE ${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/src/independant/*c )
foreach( sourcefile ${APP_SOURCES} )
  cmake_path(GET sourcefile FILENAME libname)
  string( REPLACE ".cc" "_cc" libname ${libname} )
  string( REPLACE ".c" "_c" libname ${libname} )
  add_library( ${libname} SHARED ${sourcefile})
  list(PREPEND Alllibs ${libname}) 
endforeach( sourcefile ${APP_SOURCES} )
target_link_libraries(cdilmdb_c lmdb)
target_link_libraries(cdilmdb_c z)

file( GLOB APP_SOURCES RELATIVE ${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/src/torch/*.cc )
foreach( sourcefile ${APP_SOURCES} )
  cmake_path(GET sourcefile FILENAME libname)
  string( REPLACE ".cc" "_cc" libname ${libname} )
  add_library( ${libname} SHARED ${sourcefile})
  target_link_libraries(${libname} PUBLIC ${TORCH_LIBS} cdilmdb_c)
endforeach( sourcefile ${APP_SOURCES} )

file( GLOB APP_SOURCES ${PROJECT_SOURCE_DIR}/src/cython/*.pyx )
foreach( sourcefile ${APP_SOURCES} )
  message(${sourcefile})
  cmake_path(GET sourcefile FILENAME libname)
  string( REPLACE ".pyx" ".c" cfile ${libname} )
  string( REPLACE ".pyx" "_cython" libname ${libname} )
  add_custom_command(OUTPUT ${cfile} COMMAND cython -3 ${sourcefile} --module-name=lib${libname} -o ${cfile} MAIN_DEPENDENCY ${sourcefile})
  add_library(${libname} SHARED ${cfile})
  target_link_libraries(${libname} PUBLIC cdilmdb_c ${PYTHON_LIBRARIES})
  target_compile_definitions(${libname} PUBLIC -DNPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION)
endforeach( sourcefile ${APP_SOURCES} )

file( GLOB APP_SOURCES RELATIVE ${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/src/vtk/*.cc )
foreach( sourcefile ${APP_SOURCES} )
  cmake_path(GET sourcefile FILENAME libname)
  string( REPLACE ".cc" "_cc" libname ${libname} )
  add_library( ${libname} SHARED ${sourcefile})
  target_link_libraries(${libname} PUBLIC ${VTK_LIBRARIES})
  vtk_module_autoinit(
    TARGETS ${libname}
    MODULES ${VTK_LIBRARIES}
    )
  list(PREPEND Alllibs ${libname}) 
endforeach( sourcefile ${APP_SOURCES} )

file( GLOB APP_SOURCES RELATIVE ${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/src/common/*c )
file( GLOB APP_SOURCES1 RELATIVE ${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/src/gpu_common/*.cc )
foreach( sourcefile ${APP_SOURCES} ${APP_SOURCES1})
  cmake_path(GET sourcefile FILENAME libname)
  string( REPLACE ".c" "_c" libname ${libname} )
  string( REPLACE ".cc" "_cc" libname ${libname} )
  add_library( ${libname} SHARED ${sourcefile})
  list(PREPEND Alllibs ${libname}) 
endforeach( sourcefile ${APP_SOURCES} )

set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -Xptxas=-O3")
message(${CUDA_INCLUDE_DIRS})
enable_language(CUDA)
message(${Alllibs})
file( GLOB APP_SOURCES RELATIVE ${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/src/gpu_common/*.cu )
file( GLOB APP_SOURCES2 RELATIVE ${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/src/gpu_ext/*.cu )
set(libname "cudaLibcommon_cu")
add_library(${libname} SHARED ${APP_SOURCES} ${APP_SOURCES2})
cuda_add_cufft_to_target(${libname})
set_target_properties( ${libname}
  PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
list(PREPEND Alllibs ${libname}) 

file( GLOB APP_SOURCES RELATIVE ${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/src/post_gpu/*c )
foreach( sourcefile ${APP_SOURCES} )
  cmake_path(GET sourcefile FILENAME libname)
  string( REPLACE ".c" "_c" libname ${libname} )
  string( REPLACE ".cc" "_cc" libname ${libname} )
  add_library( ${libname} SHARED ${sourcefile})
  list(PREPEND Alllibs ${libname}) 
endforeach( sourcefile ${APP_SOURCES} )


file( GLOB APP_SOURCES RELATIVE ${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/src/gpu/*.cu )
foreach( sourcefile ${APP_SOURCES} )
  cmake_path(GET sourcefile FILENAME libname)
  string( REPLACE ".cu" "_cu_lib" libname ${libname} )
  message(${libname})
  add_library(${libname} SHARED ${sourcefile})
  cuda_add_cufft_to_target(${libname})
  set_target_properties( ${libname}
    PROPERTIES CUDA_SEPARABLE_COMPILATION ON)
  target_link_libraries(${libname} ${Alllibs})
endforeach( sourcefile ${APP_SOURCES} )

target_link_libraries(cdi_cu_lib experimentConfig_cu_lib)
target_link_libraries(cdi_cu_lib mnistData_cu_lib)
target_link_libraries(cdi_cu_lib FISTA_cu_lib)
target_link_libraries(holo_cu_lib cdi_cu_lib)
target_link_libraries(monoChromo_cu_lib experimentConfig_cu_lib)
target_link_libraries(monoChromo_cu_lib FISTA_cu_lib)


file( GLOB APP_SOURCES RELATIVE ${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/util/*.cu )
foreach( sourcefile ${APP_SOURCES} )
  cmake_path(GET sourcefile FILENAME libname)
  string( REPLACE ".cu" "_cu" exename ${libname} )
  add_executable( ${exename} ${sourcefile})
  set_property(TARGET ${exename}
    PROPERTY CUDA_SEPARABLE_COMPILATION ON)
  target_link_libraries(${exename})
endforeach( sourcefile ${APP_SOURCES} )

target_link_libraries(cdi_cu cdi_cu_lib)
target_link_libraries(ptycho_cu experimentConfig_cu_lib)
target_link_libraries(pulseGen_cu cdilmdb_c)
target_link_libraries(pulseGen_cu monoChromo_cu_lib)
target_link_libraries(pulseGen_cu cdi_cu_lib)
target_link_libraries(pulseGen_shift_cu cdilmdb_c)
target_link_libraries(pulseGen_shift_cu monoChromo_cu_lib)
target_link_libraries(pulseGen_shift_cu cdi_cu_lib)
target_link_libraries(readHj_cu monoChromo_cu_lib)
target_link_libraries(mwlholo_cu monoChromo_cu_lib)
target_link_libraries(mwlholo_cu cdi_cu_lib)
target_link_libraries(holo_cu holo_cu_lib)
target_link_libraries(testFISTA_cu FISTA_cu_lib)
target_link_libraries(testFISTA_cu cdi_cu_lib)


file( GLOB APP_SOURCES RELATIVE ${PROJECT_SOURCE_DIR} ${PROJECT_SOURCE_DIR}/util/*.cpp )
foreach( sourcefile ${APP_SOURCES} )
  cmake_path(GET sourcefile FILENAME libname)
  string( REPLACE ".cpp" "_run" exename ${libname} )
  add_executable( ${exename} ${sourcefile})
  target_link_libraries(${exename} ${Alllibs} ${CUDA_LIBS})
endforeach( sourcefile ${APP_SOURCES} )
target_compile_definitions(unet_run PUBLIC -D_GLIBCXX_USE_CXX11_ABI=0)
target_compile_definitions(train_cc PUBLIC -D_GLIBCXX_USE_CXX11_ABI=0)
target_link_libraries(unet_run train_cc)
